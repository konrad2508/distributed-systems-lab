# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `Bank.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Bank
_M_Bank = Ice.openModule('Bank')
__name__ = 'Bank'

if 'AccountType' not in _M_Bank.__dict__:
    _M_Bank.AccountType = Ice.createTempClass()
    class AccountType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AccountType.Standard = AccountType("Standard", 0)
    AccountType.Premium = AccountType("Premium", 1)
    AccountType._enumerators = { 0:AccountType.Standard, 1:AccountType.Premium }

    _M_Bank._t_AccountType = IcePy.defineEnum('::Bank::AccountType', AccountType, (), AccountType._enumerators)

    _M_Bank.AccountType = AccountType
    del AccountType

if 'Currency' not in _M_Bank.__dict__:
    _M_Bank.Currency = Ice.createTempClass()
    class Currency(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Currency.USD = Currency("USD", 0)
    Currency.EUR = Currency("EUR", 1)
    Currency.GBP = Currency("GBP", 2)
    Currency.PLN = Currency("PLN", 3)
    Currency._enumerators = { 0:Currency.USD, 1:Currency.EUR, 2:Currency.GBP, 3:Currency.PLN }

    _M_Bank._t_Currency = IcePy.defineEnum('::Bank::Currency', Currency, (), Currency._enumerators)

    _M_Bank.Currency = Currency
    del Currency

if 'AccountException' not in _M_Bank.__dict__:
    _M_Bank.AccountException = Ice.createTempClass()
    class AccountException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::AccountException'

    _M_Bank._t_AccountException = IcePy.defineException('::Bank::AccountException', AccountException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    AccountException._ice_type = _M_Bank._t_AccountException

    _M_Bank.AccountException = AccountException
    del AccountException

if 'InvalidCredentialsException' not in _M_Bank.__dict__:
    _M_Bank.InvalidCredentialsException = Ice.createTempClass()
    class InvalidCredentialsException(_M_Bank.AccountException):
        def __init__(self, reason=''):
            _M_Bank.AccountException.__init__(self, reason)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::InvalidCredentialsException'

    _M_Bank._t_InvalidCredentialsException = IcePy.defineException('::Bank::InvalidCredentialsException', InvalidCredentialsException, (), False, _M_Bank._t_AccountException, ())
    InvalidCredentialsException._ice_type = _M_Bank._t_InvalidCredentialsException

    _M_Bank.InvalidCredentialsException = InvalidCredentialsException
    del InvalidCredentialsException

if 'AccountAlreadyExistsException' not in _M_Bank.__dict__:
    _M_Bank.AccountAlreadyExistsException = Ice.createTempClass()
    class AccountAlreadyExistsException(_M_Bank.AccountException):
        def __init__(self, reason=''):
            _M_Bank.AccountException.__init__(self, reason)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::AccountAlreadyExistsException'

    _M_Bank._t_AccountAlreadyExistsException = IcePy.defineException('::Bank::AccountAlreadyExistsException', AccountAlreadyExistsException, (), False, _M_Bank._t_AccountException, ())
    AccountAlreadyExistsException._ice_type = _M_Bank._t_AccountAlreadyExistsException

    _M_Bank.AccountAlreadyExistsException = AccountAlreadyExistsException
    del AccountAlreadyExistsException

if 'UnrecognizedCurrencyException' not in _M_Bank.__dict__:
    _M_Bank.UnrecognizedCurrencyException = Ice.createTempClass()
    class UnrecognizedCurrencyException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::UnrecognizedCurrencyException'

    _M_Bank._t_UnrecognizedCurrencyException = IcePy.defineException('::Bank::UnrecognizedCurrencyException', UnrecognizedCurrencyException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    UnrecognizedCurrencyException._ice_type = _M_Bank._t_UnrecognizedCurrencyException

    _M_Bank.UnrecognizedCurrencyException = UnrecognizedCurrencyException
    del UnrecognizedCurrencyException

if 'ClientData' not in _M_Bank.__dict__:
    _M_Bank.ClientData = Ice.createTempClass()
    class ClientData(object):
        def __init__(self, name='', surname='', id='', income=0.0):
            self.name = name
            self.surname = surname
            self.id = id
            self.income = income

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Bank.ClientData):
                return NotImplemented
            else:
                if self.name != other.name:
                    return False
                if self.surname != other.surname:
                    return False
                if self.id != other.id:
                    return False
                if self.income != other.income:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_ClientData)

        __repr__ = __str__

    _M_Bank._t_ClientData = IcePy.defineStruct('::Bank::ClientData', ClientData, (), (
        ('name', (), IcePy._t_string),
        ('surname', (), IcePy._t_string),
        ('id', (), IcePy._t_string),
        ('income', (), IcePy._t_double)
    ))

    _M_Bank.ClientData = ClientData
    del ClientData

if '_t_LoanHistory' not in _M_Bank.__dict__:
    _M_Bank._t_LoanHistory = IcePy.defineDictionary('::Bank::LoanHistory', (), IcePy._t_string, IcePy._t_string)

if '_t_LoanHistorySeq' not in _M_Bank.__dict__:
    _M_Bank._t_LoanHistorySeq = IcePy.defineSequence('::Bank::LoanHistorySeq', (), _M_Bank._t_LoanHistory)

if 'AccountData' not in _M_Bank.__dict__:
    _M_Bank.AccountData = Ice.createTempClass()
    class AccountData(Ice.Value):
        def __init__(self, accountType=_M_Bank.AccountType.Standard, funds=0.0, loans=Ice.Unset):
            self.accountType = accountType
            self.funds = funds
            self.loans = loans

        def ice_id(self):
            return '::Bank::AccountData'

        @staticmethod
        def ice_staticId():
            return '::Bank::AccountData'

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_AccountData)

        __repr__ = __str__

    _M_Bank._t_AccountData = IcePy.defineValue('::Bank::AccountData', AccountData, -1, (), False, False, None, (
        ('accountType', (), _M_Bank._t_AccountType, False, 0),
        ('funds', (), IcePy._t_double, False, 0),
        ('loans', (), _M_Bank._t_LoanHistorySeq, True, 1)
    ))
    AccountData._ice_type = _M_Bank._t_AccountData

    _M_Bank.AccountData = AccountData
    del AccountData

if 'RegistrationInfo' not in _M_Bank.__dict__:
    _M_Bank.RegistrationInfo = Ice.createTempClass()
    class RegistrationInfo(object):
        def __init__(self, accountType=_M_Bank.AccountType.Standard, password=''):
            self.accountType = accountType
            self.password = password

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.accountType)
            _h = 5 * _h + Ice.getHash(self.password)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Bank.RegistrationInfo):
                return NotImplemented
            else:
                if self.accountType is None or other.accountType is None:
                    if self.accountType != other.accountType:
                        return (-1 if self.accountType is None else 1)
                else:
                    if self.accountType < other.accountType:
                        return -1
                    elif self.accountType > other.accountType:
                        return 1
                if self.password is None or other.password is None:
                    if self.password != other.password:
                        return (-1 if self.password is None else 1)
                else:
                    if self.password < other.password:
                        return -1
                    elif self.password > other.password:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_RegistrationInfo)

        __repr__ = __str__

    _M_Bank._t_RegistrationInfo = IcePy.defineStruct('::Bank::RegistrationInfo', RegistrationInfo, (), (
        ('accountType', (), _M_Bank._t_AccountType),
        ('password', (), IcePy._t_string)
    ))

    _M_Bank.RegistrationInfo = RegistrationInfo
    del RegistrationInfo

_M_Bank._t_Account = IcePy.defineValue('::Bank::Account', Ice.Value, -1, (), False, True, None, ())

if 'AccountPrx' not in _M_Bank.__dict__:
    _M_Bank.AccountPrx = Ice.createTempClass()
    class AccountPrx(Ice.ObjectPrx):

        def getAccountData(self, context=None):
            return _M_Bank.Account._op_getAccountData.invoke(self, ((), context))

        def getAccountDataAsync(self, context=None):
            return _M_Bank.Account._op_getAccountData.invokeAsync(self, ((), context))

        def begin_getAccountData(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Account._op_getAccountData.begin(self, ((), _response, _ex, _sent, context))

        def end_getAccountData(self, _r):
            return _M_Bank.Account._op_getAccountData.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.AccountPrx.ice_checkedCast(proxy, '::Bank::Account', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.AccountPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::Account'
    _M_Bank._t_AccountPrx = IcePy.defineProxy('::Bank::Account', AccountPrx)

    _M_Bank.AccountPrx = AccountPrx
    del AccountPrx

    _M_Bank.Account = Ice.createTempClass()
    class Account(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Bank::Account', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::Account'

        @staticmethod
        def ice_staticId():
            return '::Bank::Account'

        def getAccountData(self, current=None):
            raise NotImplementedError("servant method 'getAccountData' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_AccountDisp)

        __repr__ = __str__

    _M_Bank._t_AccountDisp = IcePy.defineClass('::Bank::Account', Account, (), None, ())
    Account._ice_type = _M_Bank._t_AccountDisp

    Account._op_getAccountData = IcePy.Operation('getAccountData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Bank._t_AccountData, False, 0), (_M_Bank._t_InvalidCredentialsException,))

    _M_Bank.Account = Account
    del Account

_M_Bank._t_PremiumAccount = IcePy.defineValue('::Bank::PremiumAccount', Ice.Value, -1, (), False, True, None, ())

if 'PremiumAccountPrx' not in _M_Bank.__dict__:
    _M_Bank.PremiumAccountPrx = Ice.createTempClass()
    class PremiumAccountPrx(_M_Bank.AccountPrx):

        def getLoan(self, amount, currency, length, context=None):
            return _M_Bank.PremiumAccount._op_getLoan.invoke(self, ((amount, currency, length), context))

        def getLoanAsync(self, amount, currency, length, context=None):
            return _M_Bank.PremiumAccount._op_getLoan.invokeAsync(self, ((amount, currency, length), context))

        def begin_getLoan(self, amount, currency, length, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.PremiumAccount._op_getLoan.begin(self, ((amount, currency, length), _response, _ex, _sent, context))

        def end_getLoan(self, _r):
            return _M_Bank.PremiumAccount._op_getLoan.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.PremiumAccountPrx.ice_checkedCast(proxy, '::Bank::PremiumAccount', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.PremiumAccountPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::PremiumAccount'
    _M_Bank._t_PremiumAccountPrx = IcePy.defineProxy('::Bank::PremiumAccount', PremiumAccountPrx)

    _M_Bank.PremiumAccountPrx = PremiumAccountPrx
    del PremiumAccountPrx

    _M_Bank.PremiumAccount = Ice.createTempClass()
    class PremiumAccount(_M_Bank.Account):

        def ice_ids(self, current=None):
            return ('::Bank::Account', '::Bank::PremiumAccount', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::PremiumAccount'

        @staticmethod
        def ice_staticId():
            return '::Bank::PremiumAccount'

        def getLoan(self, amount, currency, length, current=None):
            raise NotImplementedError("servant method 'getLoan' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_PremiumAccountDisp)

        __repr__ = __str__

    _M_Bank._t_PremiumAccountDisp = IcePy.defineClass('::Bank::PremiumAccount', PremiumAccount, (), None, (_M_Bank._t_AccountDisp,))
    PremiumAccount._ice_type = _M_Bank._t_PremiumAccountDisp

    PremiumAccount._op_getLoan = IcePy.Operation('getLoan', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_double, False, 0), (_M_Bank._t_UnrecognizedCurrencyException, _M_Bank._t_InvalidCredentialsException))

    _M_Bank.PremiumAccount = PremiumAccount
    del PremiumAccount

_M_Bank._t_AccountManagement = IcePy.defineValue('::Bank::AccountManagement', Ice.Value, -1, (), False, True, None, ())

if 'AccountManagementPrx' not in _M_Bank.__dict__:
    _M_Bank.AccountManagementPrx = Ice.createTempClass()
    class AccountManagementPrx(Ice.ObjectPrx):

        def register(self, clientData, context=None):
            return _M_Bank.AccountManagement._op_register.invoke(self, ((clientData, ), context))

        def registerAsync(self, clientData, context=None):
            return _M_Bank.AccountManagement._op_register.invokeAsync(self, ((clientData, ), context))

        def begin_register(self, clientData, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.AccountManagement._op_register.begin(self, ((clientData, ), _response, _ex, _sent, context))

        def end_register(self, _r):
            return _M_Bank.AccountManagement._op_register.end(self, _r)

        def login(self, context=None):
            return _M_Bank.AccountManagement._op_login.invoke(self, ((), context))

        def loginAsync(self, context=None):
            return _M_Bank.AccountManagement._op_login.invokeAsync(self, ((), context))

        def begin_login(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.AccountManagement._op_login.begin(self, ((), _response, _ex, _sent, context))

        def end_login(self, _r):
            return _M_Bank.AccountManagement._op_login.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.AccountManagementPrx.ice_checkedCast(proxy, '::Bank::AccountManagement', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.AccountManagementPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::AccountManagement'
    _M_Bank._t_AccountManagementPrx = IcePy.defineProxy('::Bank::AccountManagement', AccountManagementPrx)

    _M_Bank.AccountManagementPrx = AccountManagementPrx
    del AccountManagementPrx

    _M_Bank.AccountManagement = Ice.createTempClass()
    class AccountManagement(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Bank::AccountManagement', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::AccountManagement'

        @staticmethod
        def ice_staticId():
            return '::Bank::AccountManagement'

        def register(self, clientData, current=None):
            raise NotImplementedError("servant method 'register' not implemented")

        def login(self, current=None):
            raise NotImplementedError("servant method 'login' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_AccountManagementDisp)

        __repr__ = __str__

    _M_Bank._t_AccountManagementDisp = IcePy.defineClass('::Bank::AccountManagement', AccountManagement, (), None, ())
    AccountManagement._ice_type = _M_Bank._t_AccountManagementDisp

    AccountManagement._op_register = IcePy.Operation('register', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Bank._t_ClientData, False, 0),), (), ((), _M_Bank._t_RegistrationInfo, False, 0), (_M_Bank._t_AccountAlreadyExistsException,))
    AccountManagement._op_login = IcePy.Operation('login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Bank._t_AccountPrx, False, 0), (_M_Bank._t_InvalidCredentialsException,))

    _M_Bank.AccountManagement = AccountManagement
    del AccountManagement

# End of module Bank
